library(ggplot2)
library(gridExtra)
library(MASS)
library(tidyr)
library(leaps)
library(RColorBrewer)
library(reshape2)
library(dummies)

CDIdata = read.table("http://www.math.chalmers.se/Stat/Grundutb/GU/MSG500/A18/data18.txt")
colnames(CDIdata) = c("id","county","state","area","popul","pop1834","pop65plus","phys",
                    "beds","crimes","higrads","bachelors","poors","unemployed","percapitaincome",
                    "totalincome","region")
data = CDIdata
# Response in column 1
data[,1]= 1000*(CDIdata$crimes/CDIdata$popul)
colnames(data)[1]="crmpp"


## change statets to numbers
states = as.factor(levels(data$state))

# for (i in 1:length(states)) {data$state[data$state == states[i]] = i}

# correlation matrix,to detect possible colinearities
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')

corrMat = round(cor(data[-c(2,3,17)]), 2) #Remove states, county, region
corrMat[upper.tri(corrMat)] = NA
corrMat = data.frame(melt(corrMat, na.rm = TRUE))

ggplot(data = corrMat, aes(Var1, Var2)) + geom_tile(aes(fill = value)) +
  scale_fill_gradientn(colours = hm.palette(100),name = "Pearson\nCorrelation") +
  theme(axis.text.x= element_text(size = 8, angle= 45, hjust = 1)) +
  scale_x_discrete(name = "") +
  scale_y_discrete(name = "") +
  geom_text(aes(Var1, Var2, label = value), color = "black", size = 2) +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    legend.justification = c(1, 0),
    legend.position = c(0.6, 0.7),
    legend.direction = "horizontal")+
  guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
                               title.position = "top", title.hjust = 0.5))

# remove "crimes" and "totalincome"
data = data[,-c(10,16)]

### check the disterbution of the response! 
# hist(data$crmpp)
hist(log(data$crmpp))

###Linear regression ####
# linear-regresion models with row data and log-transformed ## with all variables (no model selection)
testdata = data
lmtestdata = testdata[,-c(2,3,15)]# without county, state,region
plot(lmtestdata)

model.lm = lm(crmpp~.,data= lmtestdata) 
model.lm2 = lm(log(crmpp)~.,data= lmtestdata)
summary(model.lm)

# log-transformed data
logtestdata =lmtestdata
#logtestdata[,c(2:12)] = log(logtestdata[,c[2:12]])
#logtestdata$crmpp = log(lmtestdata$crmpp)
logtestdata$area = log(lmtestdata$area)
logtestdata$popul = log(lmtestdata$popul)
logtestdata$pop1834 = log(lmtestdata$pop1834)
logtestdata$pop65plus = log(lmtestdata$pop65plus)
logtestdata$phys = log(lmtestdata$phys)
logtestdata$beds = log(lmtestdata$beds)
logtestdata$higrads = log(lmtestdata$higrads)
logtestdata$bachelors = log(lmtestdata$bachelors)
logtestdata$poors = log(lmtestdata$poors)
logtestdata$unemployed = log(lmtestdata$unemployed)
logtestdata$percapitaincome = log(lmtestdata$percapitaincome)

colnames(logtestdata) = c("crmpp","logArea","logPopul","logPop1834","logPop65plus",
                      "logPhys","logbeds","logHigrads","logBachelors","logPoors",
                      "logUnemployed","logPercapitaincome")

plot(logtestdata)
# correlation matrix,to detect possible colinearities
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')

corrMat = round(cor(logtestdata), 2) 
corrMat[upper.tri(corrMat)] = NA
corrMat = data.frame(melt(corrMat, na.rm = TRUE))

ggplot(data = corrMat, aes(Var1, Var2)) + geom_tile(aes(fill = value)) +
  scale_fill_gradientn(colours = hm.palette(100),name = "Pearson\nCorrelation") +
  theme(axis.text.x= element_text(size = 8, angle= 45, hjust = 1)) +
  scale_x_discrete(name = "") +
  scale_y_discrete(name = "") +
  geom_text(aes(Var1, Var2, label = value), color = "black", size = 2) +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    legend.justification = c(1, 0),
    legend.position = c(0.6, 0.7),
    legend.direction = "horizontal")+
  guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
                               title.position = "top", title.hjust = 0.5))


model.loglm = lm(crmpp~.,data= logtestdata) 
summary(model.loglm)

model.loglm2 = lm(log(crmpp)~.,data= logtestdata) 

# comparing AICs

AIC(model.lm)     #2
AIC(model.lm2)    #4
AIC(model.loglm)  #1 this model has the smallest AIC among all 4 model!
AIC(model.loglm2) #3

# BIc

BIC(model.lm)     #4
BIC(model.lm2)    #2
BIC(model.loglm)  #3
BIC(model.loglm2) #1  this model has the smallest BIC among all 4 model!


